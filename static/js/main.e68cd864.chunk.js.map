{"version":3,"sources":["components/Phonebook/Phonebook.styles.jsx","components/Phonebook/Phonebook.jsx","components/Contacts/Contacts.styles.jsx","components/Contacts/Contacts.jsx","components/Filter/Filter.styles.jsx","components/Filter/Filter.jsx","redux/slices/items.js","redux/slices/filter.js","App.jsx","redux/store/store.js","index.js"],"names":["Wrapper","styled","div","Header","h2","InputName","p","SubmitButton","button","Phonebook","onSubmit","onChange","name","number","type","pattern","title","required","value","List","ul","Item","li","DeleteButton","Contacts","contactsData","onDeleteContact","map","id","onClick","Filter","filter","autoComplete","contactsSlice","createSlice","initialState","reducers","addContact","state","payload","find","contact","includes","alert","deleteContact","actions","contactsReducer","reducer","filterSlice","changeFilter","filterReducer","App","contactsItems","useSelector","items","filterItems","dispatch","useDispatch","mounted","useRef","useState","setName","setNumber","useEffect","current","localStorage","setItem","JSON","stringify","handleChange","e","target","eraseInputs","preventDefault","randomId","uuidv4","normalizedFilter","toLowerCase","visibleContacts","contacts","getItem","parsedContacts","parse","store","configureStore","preloadedState","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e68cd864.chunk.js","sourcesContent":["import styled from '@emotion/styled'\n\nexport const Wrapper = styled.div`\n  text-align: center;\n`\nexport const Header = styled.h2`\n  color: #4b3b40;\n`\nexport const InputName = styled.p`\n  color: #82735c;\n  margin: 0;\n`\nexport const SubmitButton = styled.button`\n  background-color: #9db17c;\n  color: white;\n  margin-top: 20px;\n  cursor: pointer;\n`\n","import React from 'react'\nimport { Header, SubmitButton, InputName, Wrapper } from './Phonebook.styles'\nimport PropTypes from 'prop-types'\n\nfunction Phonebook({ onSubmit, onChange, name, number }) {\n  return (\n    <Wrapper>\n      <Header>Phonebook</Header>\n      <form onSubmit={onSubmit}>\n        <InputName>Name</InputName>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={onChange}\n          value={name}\n        />\n        <InputName>Number</InputName>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          onChange={onChange}\n          value={number}\n        />\n        <br />\n        <SubmitButton type=\"submit\">Add contact</SubmitButton>\n      </form>\n    </Wrapper>\n  )\n}\n\nPhonebook.propTypes = {\n  name: PropTypes.string,\n  onChange: PropTypes.func,\n  onSubmit: PropTypes.func,\n  number: PropTypes.node,\n}\n\nexport default Phonebook\n","import styled from '@emotion/styled'\n\nexport const Wrapper = styled.div`\n  text-align: center;\n`\nexport const List = styled.ul`\n  color: #4b3b40;\n`\nexport const Item = styled.li`\n  color: #82735c;\n  list-style: none;\n`\nexport const DeleteButton = styled.button`\n  background-color: #9db17c;\n  color: white;\n  margin-left: 20px;\n  margin-top: 10px;\n  cursor: pointer;\n`\nexport const Header = styled.h2`\n  color: #4b3b40;\n`\n","import React from 'react'\nimport { Wrapper, List, Item, DeleteButton, Header } from './Contacts.styles'\nimport PropTypes from 'prop-types'\n\nfunction Contacts({ contactsData, onDeleteContact }) {\n  return (\n    <Wrapper>\n      <Header>Contacts</Header>\n      <List>\n        {contactsData.map(({ id, name, number }) => (\n          <Item key={id}>\n            {name}: {number}\n            <DeleteButton type=\"button\" onClick={() => onDeleteContact(id)}>\n              Delete contact\n            </DeleteButton>\n          </Item>\n        ))}\n      </List>\n    </Wrapper>\n  )\n}\n\nContacts.propTypes = {\n  id: PropTypes.node,\n  name: PropTypes.string,\n  number: PropTypes.number,\n}\n\nexport default Contacts\n","import styled from '@emotion/styled'\n\nexport const Wrapper = styled.div`\n  text-align: center;\n`\nexport const Header = styled.p`\n  color: #4b3b40;\n  margin-top: 10px;\n  margin-bottom: 0px;\n`\n","import React from 'react'\nimport { Header, Wrapper } from './Filter.styles'\nimport PropTypes from 'prop-types'\n\nfunction Filter({ filter, onChange }) {\n  return (\n    <Wrapper>\n      <Header>Find contacts by name</Header>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={onChange}\n        value={filter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        autoComplete=\"off\"\n      />\n    </Wrapper>\n  )\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n  onChange: PropTypes.func,\n}\n\nexport default Filter\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  items: [],\n}\n\nexport const contactsSlice = createSlice({\n  name: 'items',\n  initialState: initialState.items,\n  reducers: {\n    addContact: (state, { payload }) => {\n      const checkContact = state.find((contact) =>\n        contact.name.includes(payload.name),\n      )\n      if (checkContact) {\n        alert(`${payload.name} is already in contacts`)\n        return\n      }\n      return [...state, payload]\n    },\n    deleteContact: (state, { payload }) =>\n      state.filter(({ id }) => id !== payload),\n  },\n})\n\nexport const { addContact, deleteContact } = contactsSlice.actions\nexport const contactsReducer = contactsSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  filter: '',\n}\n\nexport const filterSlice = createSlice({\n  name: 'filter',\n  initialState: initialState.filter,\n  reducers: {\n    changeFilter: (state, { payload }) => (state = payload),\n  },\n})\n\nexport const { changeFilter } = filterSlice.actions\nexport const filterReducer = filterSlice.reducer\n","import React, { useState, useRef, useEffect } from 'react'\nimport Phonebook from './components/Phonebook/Phonebook'\nimport Contacts from './components/Contacts/Contacts'\nimport Filter from './components/Filter/Filter'\nimport { v4 as uuidv4 } from 'uuid'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addContact, deleteContact } from './redux/slices/items'\nimport { changeFilter } from './redux/slices/filter'\n\nfunction App() {\n  const contactsItems = useSelector((state) => state.items)\n  const filterItems = useSelector((state) => state.filter)\n  const dispatch = useDispatch()\n\n  const mounted = useRef(false)\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n\n  useEffect(() => {\n    if (!mounted.current) {\n      mounted.current = true\n      return\n    }\n    localStorage.setItem('contacts', JSON.stringify(contactsItems))\n  }, [contactsItems])\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    switch (name) {\n      case 'name':\n        setName(value)\n        break\n      case 'number':\n        setNumber(value)\n        break\n      case 'filter':\n        dispatch(changeFilter(value))\n        break\n\n      default:\n        break\n    }\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n    const randomId = uuidv4()\n    dispatch(addContact({ id: randomId, name, number }))\n    localStorage.setItem('contacts', JSON.stringify(contactsItems))\n    eraseInputs()\n  }\n\n  const eraseInputs = () => {\n    setName('')\n    setNumber('')\n  }\n\n  const removeContact = (id) => {\n    dispatch(deleteContact(id))\n  }\n\n  const visibleContacts = () => {\n    const normalizedFilter = filterItems.toLowerCase()\n    return contactsItems.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    )\n  }\n\n  return (\n    <div>\n      <Phonebook\n        onSubmit={handleSubmit}\n        onChange={handleChange}\n        name={name}\n        number={number}\n      ></Phonebook>\n      <Filter filter={filterItems} onChange={handleChange}></Filter>\n      <Contacts\n        contactsData={visibleContacts()}\n        onDeleteContact={removeContact}\n      ></Contacts>\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore } from '@reduxjs/toolkit'\n// import { combineReducers } from 'redux'\nimport { contactsReducer } from '../slices/items'\nimport { filterReducer } from '../slices/filter'\n// import items from '../slices/items'\n\n// const rootReducer = {\n//   items,\n// }\nconst contacts = localStorage.getItem('contacts')\nconst parsedContacts = JSON.parse(contacts)\n\nfunction initializeStorage() {\n  if (!parsedContacts) {\n    return []\n  } else {\n    return parsedContacts\n  }\n}\n\nexport const store = configureStore({\n  reducer: {\n    items: contactsReducer,\n    filter: filterReducer,\n  },\n  preloadedState: {\n    items: initializeStorage(),\n  },\n  devTools: process.env.NODE_ENV !== 'production',\n})\n\n// console.log(localStorage.getItem('contact'))\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App.jsx'\nimport { store } from './redux/store/store'\nimport { Provider } from 'react-redux'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}